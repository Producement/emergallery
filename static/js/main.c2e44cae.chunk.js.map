{"version":3,"sources":["components/Firebase/context.tsx","components/Firebase/firebase.tsx","components/Firebase/index.tsx","components/Gallery/gallery.tsx","components/Gallery/index.tsx","components/Upload/index.tsx","components/Upload/upload.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["FirebaseContext","React","withFirebase","Component","props","react","Consumer","firebase","Object","assign","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","classCallCheck","this","app","initializeApp","firestore","settings","timestampsInSnapshots","storage","Gallery","_this","possibleConstructorReturn","getPrototypeOf","call","state","images","_this2","collection","doc","match","params","id","onSnapshot","snapshot","forEach","push","data","setState","react_default","a","createElement","react_photo_gallery_es","photos","withRouter","Upload","handleselectedFile","event","selectedFile","target","files","loaded","handleUpload","_this$props","uuid","ref","child","put","then","console","log","getDownloadURL","url","set","width","height","src","className","type","name","onChange","onClick","sendSms","fetch","response","body","catch","error","HashRouter","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","context","Provider","value","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAGMA,EAAkBC,gBAAqC,MAEhDC,EAAe,SAACC,GAAD,OAAuC,SACjEC,GADiE,OAGjEC,EAAA,cAACL,EAAgBM,SAAjB,KACG,SAAAC,GAAQ,OAAIF,EAAA,cAACF,EAADK,OAAAC,OAAA,GAAeL,EAAf,CAAsBG,SAAUA,SAIlCP,qBCTTU,eAAS,CACbC,OAAQC,0CACRC,WAAYD,0BACZE,YAAaF,iCACbG,UAAWH,UACXI,cAAeJ,sBACfK,kBAAmBL,iBCPNM,aDWb,SAAAA,IAAeV,OAAAW,EAAA,EAAAX,CAAAY,KAAAF,GACbG,IAAIC,cAAcZ,2DAIlB,IAAMa,EAAYF,IAAIE,YAGtB,OADAA,EAAUC,SADO,CAAEC,uBAAuB,IAEnCF,oCAIP,OAAOF,IAAIK,mBErBTC,cACJ,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAApB,OAAAW,EAAA,EAAAX,CAAAY,KAAAO,IACjBC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAY,KAAAZ,OAAAsB,EAAA,EAAAtB,CAAAmB,GAAAI,KAAAX,KAAMhB,KACD4B,MAAQ,CAAEC,OAAQ,IAFNL,mFAKC,IAAAM,EAAAd,KAClBA,KAAKhB,MAAMG,SACRgB,YACAY,WAAW,UACXC,IAAIhB,KAAKhB,MAAMiC,MAAMC,OAAOC,IAC5BJ,WAAW,UACXK,WAAW,SAACC,GACX,IAAMR,EAAqB,GAC3BQ,EAASC,QAAQ,SAASN,GACxBH,EAAOU,KAAKP,EAAIQ,UAElBV,EAAKW,SAAS,CACZZ,OAAQA,uCAMd,OAAOa,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcC,OAAQ9B,KAAKY,MAAMC,gBAxBtB9B,aCJPwB,EDgCAwB,YAAWjD,EAAayB,qBEhCxByB,ECmDAlD,6MArCbmD,mBAAqB,SAAAC,GACnB1B,EAAKiB,SAAS,CACZU,aAAcD,EAAME,OAAOC,MAAM,GACjCC,OAAQ,OAIZC,aAAe,WAAM,IAAAC,EACShC,EAAKxB,MAAzBG,EADWqD,EACXrD,SACF+C,EAFaM,EACDvB,MACEC,OAAOC,GACrBb,EAAUnB,EAASmB,UACnBa,EAAKsB,MACCnC,EAAQoC,MAAMC,MAAMxB,GAC5ByB,IAAIpC,EAAKI,MAAMuB,cAAcU,KAAK,SAASxB,GAC7CyB,QAAQC,IAAI,cACZ1B,EAASqB,IAAIM,iBAAiBH,KAAK,SAASI,GAC1CH,QAAQC,IAAIE,GACZ9D,EACGgB,YACAY,WAAW,UACXC,IAAIkB,GACJnB,WAAW,UACXC,IAAIG,GACJ+B,IAAI,CAAEC,MAAO,EAAGC,OAAQ,EAAGC,IAAKJ,iFAhCvC,OACEvB,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,OAAOC,KAAK,GAAGrC,GAAG,GAAGsC,SAAUzD,KAAKiC,qBAChDP,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS1D,KAAKuC,cAAtB,UACAb,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS1D,KAAK2D,SAAtB,0DAkCJC,MACE,2GAECf,KAAK,SAAAgB,GAAQ,OAAIf,QAAQC,IAAIc,EAASC,QACtCC,MAAM,SAAAC,GAAK,OAAIlB,QAAQC,IAAIiB,YA5CbnF,IAAME,4BCgBZD,4LAXX,OACE4C,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAW7D,IACpCmB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWpC,aAN7BjD,eCKEsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvD,MACvB,2DCXNwD,IAASC,OACPhD,EAAAC,EAAAC,cAAC+C,EAAgBC,SAAjB,CAA0BC,MAAO,IAAI/E,GACnC4B,EAAAC,EAAAC,cAACkD,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.c2e44cae.chunk.js","sourcesContent":["import * as React from 'react';\nimport Firebase from './firebase';\n\nconst FirebaseContext = React.createContext<Firebase | null>(null);\n\nexport const withFirebase = (Component: typeof React.Component) => (\n  props: any\n) => (\n  <FirebaseContext.Consumer>\n    {firebase => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n  }\n\n  public firestore() {\n    const firestore = app.firestore();\n    const settings = { timestampsInSnapshots: true };\n    firestore.settings(settings);\n    return firestore;\n  }\n\n  public storage() {\n    return app.storage();\n  }\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport ReactGallery from 'react-photo-gallery';\nimport { withFirebase } from '../Firebase';\n\nclass Gallery extends Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = { images: [] };\n  }\n\n  componentDidMount() {\n    this.props.firebase\n      .firestore()\n      .collection('events')\n      .doc(this.props.match.params.id)\n      .collection('images')\n      .onSnapshot((snapshot: any) => {\n        const images: Array<any> = [];\n        snapshot.forEach(function(doc: any) {\n          images.push(doc.data());\n        });\n        this.setState({\n          images: images\n        });\n      });\n  }\n\n  render() {\n    return <ReactGallery photos={this.state.images} />;\n  }\n}\n\nexport default withRouter(withFirebase(Gallery));\n","import Gallery from './gallery';\nexport default Gallery;\n","import Upload from './upload';\nexport default Upload;\n","import React from 'react';\nimport uuid from 'uuid/v4';\nimport { withFirebase } from '../Firebase';\n\nclass Upload extends React.Component<any, any> {\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"file\" name=\"\" id=\"\" onChange={this.handleselectedFile} />\n        <button onClick={this.handleUpload}>Upload</button>\n        <button onClick={this.sendSms}>Send SMS to Tõnu</button>\n      </div>\n    );\n  }\n\n  handleselectedFile = event => {\n    this.setState({\n      selectedFile: event.target.files[0],\n      loaded: 0\n    });\n  };\n\n  handleUpload = () => {\n    const { firebase, match } = this.props;\n    const event = match.params.id;\n    const storage = firebase.storage();\n    const id = uuid();\n    const ref = storage.ref().child(id);\n    ref.put(this.state.selectedFile).then(function(snapshot) {\n      console.log('Saved file');\n      snapshot.ref.getDownloadURL().then(function(url) {\n        console.log(url);\n        firebase\n          .firestore()\n          .collection('events')\n          .doc(event)\n          .collection('images')\n          .doc(id)\n          .set({ width: 1, height: 1, src: url });\n      });\n    });\n  };\n\n  private sendSms() {\n    fetch(\n      'http://localhost:5000/g48riik/us-central1/messages/messages?to=+37253044744&message=häirekeskus!!!11'\n    )\n      .then(response => console.log(response.body))\n      .catch(error => console.log(error));\n  }\n}\n\nexport default withFirebase(Upload);\n","import React, { Component } from 'react';\nimport Gallery from './components/Gallery';\nimport Upload from './components/Upload';\nimport { withFirebase } from './components/Firebase';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component<any, any> {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route path=\"/event/:id\" component={Gallery} />\n          <Route path=\"/upload/:id\" component={Upload} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default withFirebase(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}